<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2012, The Infinit.e Open Source Project
   
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
   
   http://www.apache.org/licenses/LICENSE-2.0
   
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:actionscript="actionscript.*"
	xmlns:ilog="http://www.ilog.com/2007/ilog/flex"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	layout="absolute"
	implements="com.ikanow.infinit.e.widget.library.widget.IWidget"
	currentState="nodata"
	creationComplete="{ try { onWidgetCreationComplete(event); } catch (e:Error) {  } dispatchEvent(new Event('Done Loading')); }">
	<mx:states>
		<s:State name="dataview" />
		<s:State name="nodata" />
	</mx:states>
	<fx:Style source="com/ikanow/infinit/e/assets/styles/infiniteStyles.css" />
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		/* If you need to override a style in our stylesheet, or add another
		style that we did not support you can do so here, an example has been commented out
		Please see documentation about over-riding MX component styles to display fonts*/
		/*
		mx|Text
		{
		font-family: infiniteNonCFFFont;
		}
		*/
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.ikanow.infinit.e.widget.library.data.SelectedInstance;
			import com.ikanow.infinit.e.widget.library.data.SelectedItem;
			import com.ikanow.infinit.e.widget.library.enums.FilterDataSetEnum;
			import com.ikanow.infinit.e.widget.library.framework.InfiniteMaster;
			import com.ikanow.infinit.e.widget.library.frameworkold.ModuleInterface;
			import com.ikanow.infinit.e.widget.library.frameworkold.QueryResults;
			import com.ikanow.infinit.e.widget.library.utility.JSONEncoder;
			import com.ikanow.infinit.e.widget.library.widget.IWidget;
			import com.ikanow.infinit.e.widget.library.widget.IWidgetContext;
			import mx.charts.HitData;
			import mx.charts.chartClasses.Series;
			import mx.charts.effects.SeriesEffect;
			import mx.charts.events.ChartItemEvent;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UITextField;
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			import flexlib.mdi.containers.MDIWindow;
			import ilog.charts3d.series.items.ColumnSeries3DItem;
			import org.alivepdf.pdf.PDF;
			import skins.InfiniteFilterApplyOrIgnore;
			import system.data.Collection;
			import system.data.Iterator;
			import system.data.Map;
			import system.data.Set;
			import system.data.maps.HashMap;
			import system.data.sets.HashSet;
			
			[Bindable]
			private var showEffect:SeriesInterpolate = interpolateIn;
			
			private var queryData:ArrayCollection = new ArrayCollection();
			
			private var queryData_entities:ArrayCollection = null;
			
			private var currData:ArrayCollection = new ArrayCollection();
			
			private var currData_entities:ArrayCollection = new ArrayCollection();
			
			private var filterEntities:HashSet = null;
			
			private var _hasData:Boolean = false;
			
			[Bindable]
			private var allEntities:Array = [];
			
			private var maxSig:Number = 0;
			
			[Bindable]
			private var topEntitiesCombo:ArrayCollection;
			
			private var hasFilter:Boolean = false;
			
			// Determines if filtering results are immediately applied:
			private var ignoreLocalFilter:Boolean = false;
			
			private var _context:IWidgetContext;
			
			private var internalFilterUpdate:Boolean = false;
			
			// Handle the regex changing (just create a timer to avoid it happening too often)
			
			//(some horrible hackery)
			private var _filterModifyTimer:Timer = new Timer( 300, 1 ); // (runs once after 250ms)
			
			private var _regexFilter:RegExp = null;
			
			[Bindable]
			private var _regexActivateString:String = "";
			
			/**
			 * function to change the data to show the next feeds entities
			 *
			 * @param event The Event received when the sliders value is changed
			 */
			
			private var entSliderOffset:int = 0;
			
			/**
			 * function to build a pdf version of the widget
			 *
			 * @return pdf version of the widget
			 */
			public function generatePdf( printPDF:PDF, title:String ):PDF
			{
				return null; //screenshot widget (default)
			}
			
			/**
			 * function to broadcast if the module has data so it doesn't repass data to itself
			 * when new modules are being loaded with data on first load up
			 *
			 * @return If the module has data
			 */
			public function hasData():Boolean
			{
				//return true if data is already present
				return _hasData;
			}
			
			/**
			 * Allow users to export the widget contents in the specified format
			 * @format filename: the filename+path to which the data will be written (in case it needs to be embedded)
			 * @param format: the format from the "supportedFormats" call
			 *
			 * @returns a ByteArray containing the data to output
			 */
			public function onGenerateExportData( filename:String, format:String ):ByteArray
			{
				return null;
			}
			
			/**
			 * This function gets called when the user clicks to output
			 * data to a PDF. Return null if custom PDF generation is
			 * not desired.
			 *
			 * @return a new alivePdf Page containing the converted data
			 */
			public function onGeneratePDF( printPDF:PDF, title:String ):PDF
			{
				return null;
			}
			
			/**
			 * IWidget interface to receive data object (IWidgetContext).
			 * Store the iwidgetcontext so we can receieve data later.
			 */
			public function onInit( context:IWidgetContext ):void
			{
				_context = context;
			}
			
			/**
			 * If a save object has been saved from 'onSaveWidgetOptions' then
			 * when the app gets reloaded the last save string
			 * will be passed to this function.
			 *
			 * @param widgetOptions the last save object or null if there was none
			 */
			public function onLoadWidgetOptions( widgetOptions:Object ):void
			{
				//TODO
			}
			
			/**
			 * function to rescale the component when the parent container is being resized
			 *
			 * @param newHeight The new height the component needs to be set to
			 * @param newWidth The new width the component needs to be set to
			 */
			public function onParentResize( newHeight:Number, newWidth:Number ):void
			{
				this.height = newHeight;
				this.width = newWidth;
			}
			
			/**
			 * IWidget interface that fires when a new filter is done (including from ourself)
			 * We can access the data fromt he filter by using our
			 * iwidgetcontext object _context.getQuery_FilteredResults().getTopDocuments();
			 */
			public function onReceiveNewFilter():void
			{
				if ( !internalFilterUpdate )
				{
					hasFilter = true;
				}
				this.currData = _context.getQuery_FilteredResults().getTopDocuments();
				this.currData_entities = _context.getQuery_FilteredResults().getEntities();
				this.entSliderOffset = 0;
				this.sigSlider.value = 0;
				// (spinner already going, fn below unsets)
				populateGraph();
			}
			
			/**
			 * IWidget interface that fires when a new query is done.
			 * We can access the data from the query by using our
			 * iwidgetcontext object context.getQuery_TopResults().getTopDocuments();
			 */
			public function onReceiveNewQuery():void
			{
				if ( !internalFilterUpdate )
				{
					hasFilter = false;
				}
				startSpinner(); // (need dataview)
				
				if ( null == sigSlider )
				{ // may not be initialized yet?
					return;
				}
				
				this.currData = _context.getQuery_AllResults().getTopDocuments();
				this.currData_entities = _context.getQuery_AllResults().getEntities();
				
				this.entSliderOffset = 0;
				this.sigSlider.value = 0;
				// (spinner already set, fn below unsets)
				populateGraph();
			
			}
			
			/**
			 * This function gets called when the workspace is being saved.
			 * return null if no save object is needed.
			 *
			 * @return an object this widget can use to reload state
			 */
			public function onSaveWidgetOptions():Object
			{
				return null;
			}
			
			/**
			 * function to receive events from the parent and other modules
			 *
			 * @param event The Event received
			 */
			public function receiveEvent( event:Event ):void
			{
			}
			
			/**
			 * function to start the components spinner when it is receiving data
			 */
			public function startSpinner():void
			{
				this.currentState = "dataview";
				this.enabled = false;
			}
			
			/**
			 * @returns A list of supported formats, displayed in a context menu in the format
			 * "Export <string>" - these are called with "generateExportData"
			 * Note this doesn't cover the "built-in" Alive PDF export.
			 * However if the developer specifies PDF and generatePdf() returns non-null then this will be used.
			 */
			
			public function supportedExportFormats():ArrayCollection
			{
				return null;
			}
			
			protected function addDocumentsToFilter( entName:String, significance:Number, freq:Number ):void
			{
				var docids:Set = new HashSet();
				var docmap:Map = new HashMap();
				
				// All documents matching the entity (needs to have its performance improved)
				for each ( var feed:Object in this.currData )
				{
					for each ( var entities:Object in feed.entities )
					{
						if ( entities.index.toString() == entName )
						{
							if ( ( ( significance < 0.0 ) || ( significance == entities.significance ) )
								&& ( ( freq < 0.0 ) || ( freq == entities.frequency ) ) )
							{
								docids.add( feed._id.toString() );
								//add all the feeds entity names to the entNames array to pass along
								var entSet:Set = new HashSet();
								
								for each ( var ent:Object in feed.entities )
								{
									entSet.add( ent.index.toString() );
								}
								docmap.put( feed._id.toString(), entSet );
								break;
							}
						}
					}
				}
				var desc:String = "Doc Filter: ";
				
				if ( ( significance < 0.0 ) && ( freq < 0.0 ) )
				{
					desc += "Any Containing " + entName;
				}
				else if ( freq < 0.0 )
				{
					desc += "Containing Max Sig " + entName;
				}
				else
				{
					desc += "Containing Max Freq " + entName;
				}
				_context.filterByDocFieldAndEntities( FilterDataSetEnum.FILTER_GLOBAL_DATA, docids, docmap, "_id", "_id", desc );
			}
			
			/**
			 * function to handle when the chart legend is clicked on
			 *
			 * @param event The MouseEvent received when the chart legend is clicked on
			 */
			protected function chart_clickHandler( event:MouseEvent ):void
			{
				var entName:String = "";
				
				//make sure an entity was clicked
				if ( event.target is UITextField )
				{
					entName = event.target.text;
					
					var index:int = entName.lastIndexOf( " (" );
					// convert to gaz index:
					entName = entName.substring( 0, index ).toLowerCase() + "/" + entName.substring( index + 2, entName.length - 1 ).toLowerCase();
					
					addDocumentsToFilter( entName, -1.0, -1 );
				}
			}
			protected function chart_itemClickHandler( event:mx.charts.events.ChartItemEvent ):void
			{
				var data:HitData = event.hitData;
				var item:ColumnSeries3DItem = ColumnSeries3DItem( event.hitData.chartItem );
				
				var entName:String = data.item.entity.index;
				
				if ( item.yValue == data.item.augFrequency )
				{
					addDocumentsToFilter( entName, -1.0, data.item.frequency );
				}
				else if ( item.yValue == data.item.augAvgFrequency )
				{
					addDocumentsToFilter( entName, -1.0, -1 );
				}
				else if ( item.yValue == data.item.significance )
				{
					addDocumentsToFilter( entName, data.item.significance, -1 );
				}
				else
				{
					addDocumentsToFilter( entName, -1.0, -1 );
				}
			}
			
			protected function chart_mouseOver( event:MouseEvent ):void
			{
				if ( event.target is UITextField )
				{
					var textfield:UITextField = UITextField( event.target );
					var str:String = event.target.text;
					
					if ( str.length > 0 )
					{
						if ( ( str.length < 3 ) && ( 0x30 == ( str.charCodeAt( 0 ) & 0xF0 ) ) )
						{
							// One of the axis, ignore
							textfield.toolTip = "Query Significance, Dataset Significance, and Query Coverage (%s) (Max Doc Frequency and Average Frequency have their own separate scale, not shown)";
						}
						else
						{
							textfield.toolTip = "[Mouse: add docs containing entity to filter]";
						}
					}
				}
			}
			protected function entitySliderUpdate( event:Event ):void
			{
				if ( sigSlider.value < 0 )
				{
					sigSlider.value = 0;
				}
				
				if ( sigSlider.value > sigSlider.maximum )
				{
					sigSlider.value = sigSlider.maximum;
				}
				this.entSliderOffset = this.sigSlider.value;
				
				if ( ( this.entSliderOffset + 10 ) > this.allEntities.length )
				{
					this.entSliderOffset = this.allEntities.length - 10;
					
					if ( this.entSliderOffset < 0 )
					{
						this.entSliderOffset = 0;
					}
					sigSlider.value = this.entSliderOffset;
				}
				startSpinner(); // (populate graph stops spinner)
				this.populateGraph();
			}
			
			/**
			 * function to render the tool tip to display information about the entity being hovered over
			 *
			 * @param data The data for the given entity being hovered over
			 *
			 * @return The tool tip data for the entity
			 */
			private function dataTipFunction( data:HitData ):String
			{
				//create an instance of the Columnseries item
				var item:ColumnSeries3DItem = ColumnSeries3DItem( data.chartItem );
				
				var info:String = "<HTML><FONT COLOR=\"#FFFFFF\">";
				
				var filterOption:Boolean = false;
				
				info += "Entity: " + data.item.entity.disambiguated_name + "\n";
				
				if ( item.yValue == data.item.positiveSentiment )
				{
					info += "Positive Sentiment: " + data.item.positiveSentiment.toFixed( 3 ) + "\n";
					filterOption = true;
				}
				else if ( item.yValue == data.item.negativeSentiment )
				{
					info += "Negative Sentiment: " + data.item.negativeSentiment.toFixed( 3 ) + "\n";
					filterOption = true;
				}
				else if ( item.yValue == data.item.aggregateSentiment )
				{
					info += "Aggregate Sentiment: " + data.item.aggregateSentiment.toFixed( 3 ) + "\n";
				}
				else if ( item.yValue == 0.0 )
				{
					info += "(separator)\n";
				}
				
				info += "Sentiment Count:" + data.item.sentimentCount + "\n";
				
				
				
				var rounded:Number = Math.round( data.item.queryCoverage );
				
				if ( rounded > 0 )
				{ // (this number is 0 a lot...)
					info += "Query coverage: " + Number( data.item.queryCoverage ).toFixed( 1 ) + "%\n";
				}
				else if ( data.item.queryCoverage >= 0.1 )
				{ // sigh there's probably a nicer way to do this....
					info += "Query coverage: 0." + Math.round( 100.0 * data.item.queryCoverage ) + "%\n";
				}
				else if ( data.item.queryCoverage >= 0.01 )
				{
					info += "Query coverage: 0.0" + Math.round( 1000.0 * data.item.queryCoverage ) + "%\n";
				}
				else if ( data.item.queryCoverage >= 0.001 )
				{
					info += "Query coverage: 0.00" + Math.round( 10000.0 * data.item.queryCoverage ) + "%\n";
				}
				else
				{
					info += "Query coverage: ~0%\n";
				}
				
				info += "Query Significance:" + Number( data.item.datasetSignificance ).toFixed( 1 ) + "%\n";
				info += "Average Frequency: " + Number( data.item.averageFreq ).toFixed( 1 ) + "\n";
				
				
				
				info += "Entity Type: " + data.item.entity.type + "\n";
				
				if ( filterOption )
				{
					info += "[Mouse: add documents containing max value to filter]";
				}
				else
				{
					info += "[Mouse: add entity to filter]";
				}
				
				info += "</FONT></HTML?>";
				return info;
			}
			private function doneChangingFilter( event:TimerEvent ):void
			{
				if ( 0 == regexFilter.text.length )
				{
					_regexFilter = null;
					_regexActivateString = "";
				}
				else
				{
					_regexFilter = new RegExp( regexFilter.text, "i" );
					_regexActivateString = "<=";
				}
				this.populateGraph();
			}
			
			private function findMatchingDocs( instances:ArrayCollection ):void
			{
				this.filterEntities = new HashSet();
				var entityFilter:Boolean = false;
				
				if ( instances != null )
				{
					//loop through all instances
					for ( var i:int = 0; i < instances.length; i++ )
					{
						//cast to selected instance and find in original data
						var inst:SelectedInstance = instances[ i ] as SelectedInstance;
						
						for each ( var feed:Object in queryData )
						{
							if ( feed._id.toString() == inst.getfeedID() )
							{
								this.currData.addItem( feed );
								
								if ( null != inst.getEntities() && ( null != feed.entities ) )
								{
									// Can we confirm some entities have been filtered out?
									if ( feed.entities.length != inst.getEntities().length )
									{
										entityFilter = true;
									}
									
									// Unfortunately have to add entities regardless
									// (in case eg the last inst is filtered...)
									for each ( var ent:Object in inst.getEntities() )
									{
										this.filterEntities.add( ent ); // (this is the gaz index)
									}
								}
								break;
							}
						}
					}
				}
				
				if ( !entityFilter )
				{
					// (Can't do anything about expense just incurred, but at least
					//  won't incur them on the rendering side...)
					this.filterEntities = null;
				}
			}
			
			//(end regex hackery)
			
			/**
			 * function to format combo box labels
			 *
			 * @param _label The label to format
			 *
			 * @return The formatted Label
			 */
			private function formatLabel( _label:Object ):String
			{
				var label:String = "";
				label = _label.entity.disambiguated_name.toString() + " (" + _label.entity.type + ")";
				return label;
			}
			/**
			 * function to get the top frequency for the entities being displayed
			 *
			 * @param _entities The array of entities
			 *
			 * @return The top frequency of the top ten entities
			 */
			private function getFreq( _entities:Array ):Number
			{
				var freq:Number = 0;
				
				for ( var i:int = 0; ( i < 10 ) && ( ( i + this.entSliderOffset ) < _entities.length ); i++ )
				{
					var _ent:Object = new Object();
					_ent = _entities[ i + this.entSliderOffset ];
					
					if ( Number( _ent.frequency ) > freq )
					{
						freq = Number( _ent.frequency );
					}
					
					if ( Number( _ent.averageFreq ) > freq )
					{
						freq = Number( _ent.averageFreq );
					}
				}
				return freq;
			}
			
			private function graphFromAggregatedEntities():ArrayCollection
			{
				var entities:ArrayCollection = new ArrayCollection();
				
				for each ( var entity:Object in this.currData_entities )
				{
					var entContainer:Object = new Object;
					entContainer[ "entity" ] = entity;
					entContainer[ "queryCoverage" ] = entity.queryCoverage;
					entContainer[ "datasetSignificance" ] = entity.datasetSignificance;
					entContainer[ "averageFreq" ] = 100.0 * entity.averageFreq / entity.queryCoverage; // (QC is a % so /100 to turn into a multiplier...)
					entContainer[ "sentimentCount" ] = entity.sentimentCount;
					entContainer[ "positiveSentiment" ] = entity.positiveSentiment;
					entContainer[ "negativeSentiment" ] = entity.negativeSentiment;
					entContainer[ "aggregateSentiment" ] = entity.positiveSentiment + entity.negativeSentiment;
					// (average over documents in which the entity is present)
					entities.addItem( entContainer );
				}
				return entities;
			}
			
			/**
			 * function to render entities on the x axis
			 *
			 * @param axis The current axis
			 * @param data The data for the current axis
			 *
			 * @return The information for the current axis
			 */
			private function hAxisDataFunction( axis:Object, data:Object ):Object
			{
				if ( data != null )
				{
					return data.entity.disambiguated_name.toString() + " (" + data.entity.type.toString() + ")";
				}
				else
					return "";
			}
			
			private function onChangeEntityFilter( event:Event ):void
			{
				// Start a timer for 300ms time
				this._filterModifyTimer.stop();
				this._filterModifyTimer.start();
			}
			// This function handles clicking the "ignore local filter" button:
			// - If no filter is applied, sets a flag
			// - If a filter is applied and "ignore filter" is currently "true":
			//    - Sets flag and re-calls receivedSelectedResults with the previously saved filtered results
			// - If a filter is applied and "ignore filter" is currently "false"
			//    - Sets flag and restores previously saved unfiltered results
			
			private function onClickIgnoreLocalFilter():void
			{
				internalFilterUpdate = true;
				this.ignoreLocalFilter = !this.ignoreLocalFilter;
				
				if ( !ignoreLocalFilter )
				{
					if ( hasFilter )
						this.onReceiveNewFilter();
					else
						this.onReceiveNewQuery();
				}
				else
				{
					this.onReceiveNewQuery();
				}
				
				// Housekeeping
				var parent:Object = this.parent.parent.hasOwnProperty( "title" ) ? this.parent.parent as Object : this.parent.parent.parent as Object;
				var btnskin:InfiniteFilterApplyOrIgnore = localFilterSettings.skin as InfiniteFilterApplyOrIgnore;
				
				if ( !this.ignoreLocalFilter )
				{
					btnskin.changeSelected( false );
					localFilterSettings.toolTip = "Ignore Internal Filtering";
					var title:String = parent.title;
					parent.title = title.substring( 0, title.lastIndexOf( " (ignore internal filtering)" ) );
				}
				else
				{
					btnskin.changeSelected( true );
					localFilterSettings.toolTip = "Apply Internal Filtering";
					parent.title = parent.title + " (ignore internal filtering)";
				}
				internalFilterUpdate = false;
			}
			
			/**
			 * Method fired when module is done loading.  Sends
			 * message to parent letting it know that module is
			 * ready to receive data.
			 */
			private function onWidgetCreationComplete( event:Event ):void
			{
				_filterModifyTimer.addEventListener( TimerEvent.TIMER_COMPLETE, doneChangingFilter );
			}
			
			private function populateGraph():void
			{
				if ( ( this.currData != null && this.currData.length > 0 ) || ( this.currData_entities != null && this.currData_entities.length > 0 ) )
				{
					//instantiate a hashset to hold all the entities so that there are no duplicates
					var entities:HashSet = new HashSet();
					
					// Get a single set of entities from all the feeds
					
					if ( this.currData_entities != null && this.currData_entities.length > 0 )
					{ // Use entities if we can...
						this.allEntities = graphFromAggregatedEntities().toArray();
					}
					else
					{ // Use documents if we have to
						this.allEntities = removeDups( this.currData ).toArray();
					}
					
					if ( !sortByQueryCoverage.enabled )
					{
						this.allEntities.sortOn( "queryCoverage", Array.DESCENDING | Array.NUMERIC );
					}
					else if ( !sortBySignificance.enabled )
					{
						this.allEntities.sortOn( "datasetSignificance", Array.DESCENDING | Array.NUMERIC );
					}
					else if ( !sortByAverage.enabled )
					{
						this.allEntities.sortOn( "averageFreq", Array.DESCENDING | Array.NUMERIC );
					}
					else if ( !sortByPositiveSentiment.enabled )
					{
						this.allEntities.sortOn( "positiveSentiment", Array.DESCENDING | Array.NUMERIC );
					}
					else if ( !sortByNegativeSentiment.enabled )
					{
						this.allEntities.sortOn( "negativeSentiment", Array.NUMERIC );
					}
					else if ( !sortByAggregateSentimentAscending.enabled )
					{
						this.allEntities.sortOn( "aggregateSentiment", Array.NUMERIC );
					}
					else if ( !sortByAggregateSentimentDescending.enabled )
					{
						this.allEntities.sortOn( "aggregateSentiment", Array.DESCENDING | Array.NUMERIC );
					}
					
					// Display the following fields:
					// Query coverage (%)
					// Query Significance (%)
					// (max) Doc significance (%)
					// Average frequency
					// (max) Doc frequency
					// (also have a separator					
					
					//store the top 10 entities into a seperate array
					var topEntities:ArrayCollection = new ArrayCollection();
					entityToSend.selectedIndex = -1;
					topEntitiesCombo = new ArrayCollection();
					
					var maxFreq:int = getFreq( allEntities );
					
					// (Regex code - step over the specified number of *unfiltered* entities)
					var j:int = 0;
					var i:int = this.entSliderOffset;
					
					if ( null != _regexFilter )
					{
						for ( i = 0; ( i < this.allEntities.length ) && ( j < this.entSliderOffset ); ++i )
						{
							var ent2:Object = this.allEntities[ i ];
							
							if ( _regexFilter.test( ent2.entity.disambiguated_name + " ( " + ent2.entity.type + " ) " + ent2.entity.dimension ) )
							{
								j++;
							}
						}
						j = 0;
					}
					
					for ( ; ( j < 10 ) && ( i < this.allEntities.length ); i++, j++ )
					{
						var ent:Object = this.allEntities[ i ];
						
						if ( null != _regexFilter )
						{
							if ( !_regexFilter.test( ent.entity.disambiguated_name + " ( " + ent.entity.type + " ) " + ent.entity.dimension ) )
							{
								j--;
								continue;
							}
						}
						
						ent[ "augFrequency" ] = Math.ceil( ( this.maxSig / maxFreq ) * Number( ent.frequency ) );
						ent[ "augAvgFrequency" ] = Math.ceil( ( this.maxSig / maxFreq ) * Number( ent.averageFreq ) );
						ent[ "zero" ] = 0;
						
						// Since the tooltips dubiously use y-value to work out which field is which, need to ensure
						// that the similar numbers don't get confused
						if ( ent.augFrequency == ent.augAvgFrequency )
						{
							ent.augAvgFrequency += 0.0001;
								// (need to leave freq alone since it's used for finding the right feed)
						}
						
						if ( ent.significance == ent.datasetSignificance )
						{
							ent.datasetSignificance += 0.0001;
								// (need to leave sig alone since it's used for finding the right feed)
						}
						
						if ( ent.significance == ent.queryCoverage )
						{
							ent.queryCoverage += 0.0001;
								// (need to leave sig alone since it's used for finding the right feed)
						}
						
						if ( ent.positiveSentiment == ent.aggregateSentiment || ent.positiveSentiment == 0 )
						{
							ent.positiveSentiment += 0.0001;
						}
						
						if ( ent.negativeSentiment == ent.aggregateSentiment || ent.negativeSentiment == 0 )
						{
							ent.negativeSentiment -= 0.0001;
						}
						
						if ( ent.aggregateSentiment == 0 )
						{
							ent.aggregateSentiment += 0.0001;
						}
						
						topEntities.addItem( ent );
						topEntitiesCombo.addItem( ent );
					}
					entityToSend.dataProvider = this.topEntitiesCombo;
					entityToSend.validateNow();
					entityToSend.selectedIndex = 0;
					
					setSeriesEffect( interpolateIn );
					chart.dataProvider = topEntities;
					
					_hasData = true;
				}
				else
				{
					this.currentState = "nodata";
				}
				this.enabled = true;
			}
			
			private function rankingOrderChange( event:MouseEvent ):void
			{
				if ( event.target == sortByQueryCoverage )
				{
					sortByQueryCoverage.enabled = false;
					sortBySignificance.enabled = true;
					sortByAverage.enabled = true;
					sortByPositiveSentiment.enabled = true;
					sortByNegativeSentiment.enabled = true;
					sortByAggregateSentimentAscending.enabled = true;
					sortByAggregateSentimentDescending.enabled = true;
				}
				else if ( event.target == sortBySignificance )
				{
					sortByQueryCoverage.enabled = true;
					sortBySignificance.enabled = false;
					sortByAverage.enabled = true;
					sortByPositiveSentiment.enabled = true;
					sortByNegativeSentiment.enabled = true;
					sortByAggregateSentimentAscending.enabled = true;
					sortByAggregateSentimentDescending.enabled = true;
				}
				else if ( event.target == sortByAverage )
				{
					sortByQueryCoverage.enabled = true;
					sortBySignificance.enabled = true;
					sortByAverage.enabled = false;
					sortByPositiveSentiment.enabled = true;
					sortByNegativeSentiment.enabled = true;
					sortByAggregateSentimentAscending.enabled = true;
					sortByAggregateSentimentDescending.enabled = true;
				}
				else if ( event.target == sortByPositiveSentiment )
				{
					sortByQueryCoverage.enabled = true;
					sortBySignificance.enabled = true;
					sortByAverage.enabled = true;
					sortByPositiveSentiment.enabled = false;
					sortByNegativeSentiment.enabled = true;
					sortByAggregateSentimentAscending.enabled = true;
					sortByAggregateSentimentDescending.enabled = true;
				}
				else if ( event.target == sortByNegativeSentiment )
				{
					sortByQueryCoverage.enabled = true;
					sortBySignificance.enabled = true;
					sortByAverage.enabled = true;
					sortByPositiveSentiment.enabled = true;
					sortByNegativeSentiment.enabled = false;
					sortByAggregateSentimentAscending.enabled = true;
					sortByAggregateSentimentDescending.enabled = true;
				}
				else if ( event.target == sortByAggregateSentimentAscending )
				{
					sortByQueryCoverage.enabled = true;
					sortBySignificance.enabled = true;
					sortByAverage.enabled = true;
					sortByPositiveSentiment.enabled = true;
					sortByNegativeSentiment.enabled = true;
					sortByAggregateSentimentAscending.enabled = false;
					sortByAggregateSentimentDescending.enabled = true;
				}
				else if ( event.target == sortByAggregateSentimentDescending )
				{
					sortByQueryCoverage.enabled = true;
					sortBySignificance.enabled = true;
					sortByAverage.enabled = true;
					sortByPositiveSentiment.enabled = true;
					sortByNegativeSentiment.enabled = true;
					sortByAggregateSentimentAscending.enabled = true;
					sortByAggregateSentimentDescending.enabled = false;
				}
				this.populateGraph();
			}
			
			/**
			 * function to remove duplicate entities
			 *
			 * @param entities The list of entities to remove duplicates from
			 *
			 * @return The hashset of non duplicate entities
			 */
			private function removeDups( feeds:ArrayCollection ):ArrayCollection
			{
				this.maxSig = 0;
				
				var entities:HashMap = new HashMap();
				
				//loop through the knowledge arrayCollection to get all the feed objects
				for each ( var feed:Object in feeds )
				{
					//loop through the feed objects to get all the entities and add them to the hashset
					for each ( var entity:Object in feed.entities )
					{
						if ( entity.significance > this.maxSig )
						{
							this.maxSig = entity.significance;
						}
						
						if ( entity.datasetSignificance > this.maxSig )
						{
							this.maxSig = entity.datasetSignificance;
						}
						
						if ( entity.queryCoverage > this.maxSig )
						{
							this.maxSig = entity.queryCoverage;
						}
						
						var savedEnt:Object = entities.get( entity.index );
						
						if ( null != savedEnt )
						{
							// Get the maximum values:
							if ( entity.positiveSentiment > savedEnt.positiveSentiment )
							{
								savedEnt.positiveSentiment = entity.positiveSentiment;
							}
							
							if ( entity.negativeSentiment < savedEnt.negativeSentiment )
							{
								savedEnt.negativeSentiment = entity.negativeSentiment;
							}
							// Replace: can't imagine we need to do this, but empirically it seemed to be the case							
							entities.put( entity.index, savedEnt );
						}
						else
						{
							if ( null != this.filterEntities )
							{
								// (Entity filter has been applied)
								if ( !this.filterEntities.contains( entity.index ) )
								{
									continue; // Don't have this one
								}
							}
							var entContainer:Object = new Object;
							entContainer[ "entity" ] = entity;
							entContainer[ "queryCoverage" ] = entity.queryCoverage;
							entContainer[ "datasetSignificance" ] = entity.datasetSignificance;
							entContainer[ "averageFreq" ] = 100.0 * entity.averageFreq / entity.queryCoverage; // (QC is a % so /100 to turn into a multiplier...)
							entContainer[ "positiveSentiment" ] = entity.positiveSentiment;
							entContainer[ "negativeSentiment" ] = entity.negativeSentiment;
							entContainer[ "aggregateSentiment" ] = entity.positiveSentiment + entity.negativeSentiment;
							entContainer[ "sentimentCount" ] = entity.sentimentCount;
							// (average over documents in which the entity is present)
							entities.put( entity.index, entContainer );
						}
					} // end loop over ents in feeds
				} // end loop over feeds
				
				return new ArrayCollection( entities.getValues() );
			}
			
			/**
			 * function to add entities to the query
			 *
			 * @param event The MouseEvent received when the add to query button is pressed
			 */
			private function send2Query( event:MouseEvent ):void
			{
				var query:Object = _context.getCurrentQuery();
				var queryTerms:ArrayCollection = new ArrayCollection( query[ "qt" ] );
				var newTerm:Object = new Object();
				newTerm[ "entity" ] = entityToSend.selectedItem.entity.index;
				queryTerms.addItem( newTerm );
				_context.setCurrentQuery( query, null );
			}
			
			/**
			 * function to load data for each series
			 *
			 * @param series The current series
			 * @param data The data for the current series
			 * @param field The field for the series
			 *
			 * @return The series information
			 */
			private function seriesDataFunction( series:Series, data:Object, field:String = null ):Object
			{
				return data.frequency.toString();
			}
			
			/**
			 * function to add an effect to the series when data is changed
			 *
			 * @param effect The effect to add to the series
			 */
			private function setSeriesEffect( effect:SeriesEffect ):void
			{
				aggregateSentiment.setStyle( 'showDataEffect', effect );
				negativeSentiment.setStyle( 'showDataEffect', effect );
				positiveSentiment.setStyle( 'showDataEffect', effect );
			}
			
			/**
			 * function to render the values on the y axis
			 *
			 * @param o The object at the current location
			 * @param v The value at the current location
			 *
			 * @return The current value at that location
			 */
			private function vAxisLabelFunction( o:Object, v:Object ):String
			{
				return v.toString();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:SeriesInterpolate id="interpolateIn"
			duration="1000" />
		<actionscript:CartesianChart3DControl chart="{ chart }" />
		<s:SolidColorStroke id="seriesStroke"
			color="0x222222"
			alpha="0.5" />
	</fx:Declarations>
	<s:VGroup 
		width="100%"
		height="100%"
		horizontalAlign="center"
		verticalAlign="middle"
		includeIn="nodata">
		<s:Label 
			text="No data, try running a query"
			includeIn="nodata" />
	</s:VGroup>

	<s:VGroup 
		width="100%"
		height="100%"
		x="0"
		y="0"
		horizontalAlign="center"
		gap="0"
		includeIn="dataview">

		<!-- Toolbar -->

		<mx:ApplicationControlBar 
			width="100%"
			fillAlphas="[1.0, 1.0]"
			fillColors="[#838080, #050505]">
			<s:HGroup 
				width="100%"
				horizontalAlign="left"
				left="10"
				top="10"
				verticalAlign="middle">
				<s:ComboBox id="entityToSend"
					dataProvider="{ topEntitiesCombo }"
					labelFunction="formatLabel"
					width="25%"
					selectedIndex="0" />
				<s:Button id="querybtn"
					toolTip="Add to Query"
					click="send2Query(event);"
					skinClass="skins.LinkAnalysisAddToQuerySkin" />
				<mx:Spacer width="5" />
				<s:Button id="localFilterSettings"
					toolTip="Ignore Internal Filtering"
					click="onClickIgnoreLocalFilter()"
					skinClass="skins.InfiniteFilterApplyOrIgnore" />
				<mx:Spacer width="5" />
				<s:Button id="sortByQueryCoverage"
					toolTip="Rank entities by query coverage %"
					click="rankingOrderChange(event)"
					skinClass="skins.DetailsSortByGeoSkin" />
				<s:Button id="sortBySignificance"
					enabled="false"
					toolTip="Rank entities by query significance"
					click="rankingOrderChange(event)"
					skinClass="skins.DetailsSortByScoreSkin" />
				<s:Button id="sortByAverage"
					toolTip="Rank entities by average frequency"
					click="rankingOrderChange(event)"
					skinClass="skins.DetailsSortByDateSkin" />
				<s:Button id="sortByPositiveSentiment"
					toolTip="Rank entities by positive sentiment"
					click="rankingOrderChange(event)"
					skinClass="skins.SentimentSortByPositiveSentimentSkin" />
				<s:Button id="sortByNegativeSentiment"
					toolTip="Rank entities by negative sentiment"
					click="rankingOrderChange(event)"
					skinClass="skins.SentimentSortByNegativeSentimentSkin" />
				<s:Button id="sortByAggregateSentimentDescending"
					toolTip="Rank entities by most positive aggregate sentiment"
					click="rankingOrderChange(event)"
					skinClass="skins.SentimentSortByAggregateSentimentDescSkin" />
				<s:Button id="sortByAggregateSentimentAscending"
					toolTip="Rank entities by most negative aggregate sentiment"
					click="rankingOrderChange(event)"
					skinClass="skins.SentimentSortByAggregateSentimentAscSkin" />

				<mx:Spacer width="5" />
				<s:Label id="regexFilterLabel"
					text="Show only: "
					color="0xFFFFFF"
					fontWeight="bold" />
				<s:TextInput id="regexFilter"
					toolTip="Enter a regex string to filter entities on name, type, or dimension"
					change="onChangeEntityFilter(event)" />
			</s:HGroup>
		</mx:ApplicationControlBar>
		<mx:Spacer height="5" />

		<!-- Graph -->

		<mx:ViewStack id="views"
			width="100%"
			height="100%"
			creationPolicy="all"
			includeIn="dataview">
			<s:NavigatorContent 
				width="100%"
				height="100%">
				<s:Rect 
					width="100%"
					height="100%">
					<s:fill>
						<s:LinearGradient rotation="90">
							<s:entries>
								<s:GradientEntry color="0x000000" />
								<s:GradientEntry color="0x323232" />
							</s:entries>
						</s:LinearGradient>
					</s:fill>
				</s:Rect>
				<s:HGroup 
					width="100%"
					height="100%">
					<ilog:ColumnChart3D id="chart"
						width="80%"
						height="100%"
						x="0"
						color="0xFFFFFF"
						top="50"
						click="chart_clickHandler(event)"
						itemClick="chart_itemClickHandler(event)"
						mouseOver="chart_mouseOver(event)"
						columnWidthRatio="0.9"
						dataTipCalloutStroke="{ seriesStroke }"
						dataTipFunction="dataTipFunction"
						depth="5"
						elevationAngle="40"
						rotationAngle="50"
						showDataTips="true"
						type="clustered">
						<ilog:wallsFill>
							<s:LinearGradient rotation="30">
								<s:GradientEntry color="0x444444" />
								<s:GradientEntry 
									color="0x000000"
									alpha="0.0" />
							</s:LinearGradient>
						</ilog:wallsFill>

						<ilog:wallsStroke>
							<s:SolidColorStroke 
								color="0xFFFFFF"
								alpha="0.4"
								weight="1" />
						</ilog:wallsStroke>
						<ilog:verticalAxisRenderer>
							<ilog:AxisRenderer3D 
								labelFunction="vAxisLabelFunction"
								axisWidth="0"
								minorTickPlacement="none" />
						</ilog:verticalAxisRenderer>
						<ilog:horizontalAxisRenderer>
							<ilog:AxisRenderer3D 
								axisWidth="0"
								minorTickLength="0"
								minorTickPlacement="inside">
								<ilog:tickStroke>
									<s:SolidColorStroke color="0xFF0000" />
								</ilog:tickStroke>
								<ilog:fill>
									<mx:SolidColor color="0x333333" />
								</ilog:fill>
							</ilog:AxisRenderer3D>
						</ilog:horizontalAxisRenderer>
						<ilog:horizontalAxis>
							<mx:CategoryAxis id="entityAxis"
								dataFunction="hAxisDataFunction" />
						</ilog:horizontalAxis>
						<ilog:series>
							<ilog:ColumnSeries3D id="positiveSentiment"
								displayName="Positive Sentiment"
								fill="{ new SolidColor( 0x00FF00 ) }"
								stroke="{ seriesStroke }"
								yField="positiveSentiment" />
							<ilog:ColumnSeries3D id="aggregateSentiment"
								displayName="Aggregate Sentiment"
								fill="{ new SolidColor( 0x00BFFF ) }"
								stroke="{ seriesStroke }"
								yField="aggregateSentiment" />
							<ilog:ColumnSeries3D id="negativeSentiment"
								displayName="Negative Sentiment"
								fill="{ new SolidColor( 0xFF0000 ) }"
								stroke="{ seriesStroke }"
								yField="negativeSentiment" />

							<ilog:ColumnSeries3D id="separator"
								fill="{ null }"
								stroke="{ seriesStroke }"
								yField="zero" />
						</ilog:series>
					</ilog:ColumnChart3D>
					<!--<mx:Spacer height="5"/>-->
					<s:VGroup 
						width="20%"
						height="15%"
						horizontalAlign="left"
						paddingLeft="10"
						paddingRight="10"
						paddingTop="20"
						gap="0">
						<s:Label 
							text="Legend"
							color="0xFFFFFF"
							fontWeight="bold" />
						<mx:Legend 
							dataProvider="{ chart }"
							color="0xFFFFFF"
							verticalAlign="bottom" />
					</s:VGroup>
				</s:HGroup>

			</s:NavigatorContent>
		</mx:ViewStack>

		<!-- Navigation bar -->

		<mx:ApplicationControlBar 
			width="100%"
			fillAlphas="[1.0, 1.0]"
			fillColors="[#838080, #050505]">
			<s:VGroup id="sigContainer"
				width="100%"
				horizontalAlign="center"
				verticalAlign="middle">
				<s:Label id="percentile"
					width="100%"
					text="Step through { _regexActivateString }{ allEntities.length } entities (\@{ sigSlider.value }):"
					color="0xFFFFFF"
					fontWeight="bold"
					textAlign="center" />
				<s:HGroup 
					width="100%"
					horizontalAlign="center"
					verticalAlign="middle">
					<s:Button id="minusSlider"
						toolTip="Step Back 10"
						width="20"
						height="20"
						click="sigSlider.value -= 10; entitySliderUpdate(event);"
						skinClass="skins.SliderMinusButtonSkin" />
					<s:HSlider id="sigSlider"
						width="100%"
						stepSize="1"
						minimum="0"
						maximum="{ allEntities.length }"
						liveDragging="false"
						change="entitySliderUpdate(event)" />
					<s:Button id="plusSlider"
						toolTip="Step Forward 10"
						width="20"
						height="20"
						click="sigSlider.value += 10; entitySliderUpdate(event);"
						skinClass="skins.SliderPlusButtonSkin" />
				</s:HGroup>
			</s:VGroup>
		</mx:ApplicationControlBar>
		<mx:Spacer height="5" />
	</s:VGroup>

</mx:Module>
