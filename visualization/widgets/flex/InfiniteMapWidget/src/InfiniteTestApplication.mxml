<?xml version="1.0" encoding="utf-8"?>
<!--

The MIT License
Copyright (c) 2011 IKANOW llc

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:containers="flexlib.mdi.containers.*"
	xmlns:local="*"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	creationComplete="application1_creationCompleteHandler(event)">
	<fx:Style source="/com/ikanow/infinit/e/assets/styles/infiniteStyles.css" />
	<fx:Script>
		<![CDATA[
			import com.ikanow.infinit.e.widget.library.data.ResultSet;
			import com.ikanow.infinit.e.widget.library.data.WidgetContext;
			import com.ikanow.infinit.e.widget.library.frameworkold.ModuleInterface;
			import com.ikanow.infinit.e.widget.library.frameworkold.QueryResults;
			import com.ikanow.infinit.e.widget.library.utility.Authentication;
			import com.ikanow.infinit.e.widget.library.utility.JSONDecoder;
			import com.ikanow.infinit.e.widget.library.utility.JSONEncoder;
			import com.ikanow.infinit.e.widget.library.utility.URLEncoder;
			import com.ikanow.infinit.e.widget.library.widget.IWidget;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.modules.ModuleLoader;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import flexlib.mdi.events.MDIWindowEvent;
			
			//private var API_SERVER:String = "http://infinite.ikanow.com/api/"; 	//api url address of infinite api server
			private var API_SERVER:String = "http://ec2-50-17-89-62.compute-1.amazonaws.com/api/"; 	//api url address of infinite api server
			
			private var GROUPID:String = "4c927585d591d31d7b37097a"; //system group, default
			
			private var context:WidgetContext = new WidgetContext();    		//new module data holder
			
			private var queryResults:QueryResults = new QueryResults(); 		//old module data holder
			
			/**
			 * Event handler for running query.  Takes input in querytext box and sends
			 * an exact text search off to the infinite API.
			 */
			
			private var _lastQuery:Object = null;
			
			/**
			 * Rescale event when module window gets resized, sends a message to the
			 * module letting it know to adjust its size so it will scale appropriately.
			 */
			public function reScale( event:Event ):void
			{
				//try to cast module and rescale it
				var module:ModuleInterface = devModule as ModuleInterface;
				
				if ( null != module ) //old module interface
				{
					module.reScale( devModuleContainer.height, devModuleContainer.width );
				}
				else //new widget interface
				{
					var iwid:IWidget = devModule as IWidget;
					iwid.onParentResize( devModuleContainer.height, devModuleContainer.width );
				}
			}
			
			/**
			 * On init of application, send modules the shared iwidgetcontext object.
			 */
			protected function application1_creationCompleteHandler( event:FlexEvent ):void
			{
				devModuleContainer.addEventListener( MDIWindowEvent.RESIZE, reScale );
				reScale( null );
				devModule.onInit( context );
			}
			
			/**
			 * Login button event, sends login query to API.
			 */
			protected function button1_clickHandler( event:Event ):void
			{
				if ( 0 == usernameInput.text.length )
				{
					usernameInput.text = "USERNAME";
					passwordInput.text = "PASSWORD";
				}
				
				var hashpassword:String = Authentication.hashPassword( passwordInput.text );
				infiniteLoginService.url = API_SERVER + "auth/login/" + URLEncoder.encode( usernameInput.text ) + "/" + URLEncoder.encode( hashpassword );
				infiniteLoginService.send();
			}
			protected function button2_clickHandler( event:Event ):void
			{
				infiniteQueryService.url = API_SERVER + "knowledge/query/" + GROUPID;
				infiniteQueryService.method = "POST";
				var header:Object = new Object();
				header[ "Accept" ] = "application/json";
				infiniteQueryService.contentType = "application/json";
				infiniteQueryService.headers = header;
				_lastQuery = JSONEncoder.encode( queryInput.text );
				infiniteQueryService.send( queryInput.text );
			}
			
			/**
			 * Error sending login request, usually from a bad URL. (Wrong API server)
			 */
			protected function infiniteLoginServiceFault( event:FaultEvent ):void
			{
				Alert.show( "Error logging in\n" + event.fault.message );
			}
			
			/**
			 * Login result event, checks if login was successful and sends out
			 * a request for the logged in users groupid.
			 */
			protected function infiniteLoginServiceResult( event:ResultEvent ):void
			{
				var data:Object = JSONDecoder.decode( event.result as String );
				
				if ( data.response.success.toString() == "true" )
				{
					//TODO: get actual groups
					loginLabel.text = "logged in!";
					loginLabel.setStyle( "color", "0x00FF00" );
					
					// Give sample query:
					queryInput.text = '{ "qt": [ { "etext":"*" } ], "output": { } }';
				}
				else
				{
					Alert.show( "Error logging in." );
				}
			}
			
			/**
			 * Query failed function (perhaps cookie timed out)
			 */
			protected function infiniteQueryServiceFault( event:FaultEvent ):void
			{
				Alert.show( "Error sending query\n" + event.fault.message );
			}
			
			/**
			 * Result function for query API call.  Gets results from query and
			 * creates a context object out of it.  Sends to modules onReceiveNewQuery()
			 * function to let them know they have new data.
			 */
			protected function infiniteQueryServiceResult( event:ResultEvent ):void
			{
				var data:Object = JSONDecoder.decode( event.result as String );
				
				//TODO: save the query object somwhere, get the description...
				
				queryResults = new QueryResults();
				queryResults.populateQueryResults( data, null, context );
				
				context.onNewQuery( queryResults, data.response.message, _lastQuery );
				var iwid:IWidget = devModule as IWidget;
				iwid.onReceiveNewQuery();
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="infiniteLoginService"
			fault="infiniteLoginServiceFault(event)"
			result="infiniteLoginServiceResult(event)" />
		<s:HTTPService id="infiniteQueryService"
			fault="infiniteQueryServiceFault(event)"
			result="infiniteQueryServiceResult(event)" />
	</fx:Declarations>
	<s:VGroup 
		width="100%"
		height="100%">

		<containers:MDICanvas 
			width="100%"
			height="100%">
			<containers:MDIWindow id="panel"
				verticalScrollPolicy="off"
				horizontalScrollPolicy="off"
				layout="absolute"
				x="0"
				y="50"
				width="250"
				height="270"
				borderColor="#010101"
				horizontalAlign="center"
				verticalAlign="middle"
				verticalGap="0"
				title="Infinite Sandbox">
				<s:VGroup 
					horizontalAlign="center"
					paddingBottom="5"
					paddingLeft="5"
					paddingRight="5"
					paddingTop="5"
					verticalAlign="middle">
					<s:Group>
						<s:BorderContainer borderVisible="true">
							<s:layout>
								<s:VerticalLayout 
									horizontalAlign="center"
									verticalAlign="middle" />
							</s:layout>
							<s:Label text="Step 1: Login" />
							<s:HGroup verticalAlign="middle">
								<s:Label text="Username" />
								<s:TextInput id="usernameInput" />
							</s:HGroup>
							<s:HGroup verticalAlign="middle">
								<s:Label text="Password" />
								<s:TextInput id="passwordInput"
									displayAsPassword="true"
									enter="button1_clickHandler(event)" />
							</s:HGroup>
							<s:HGroup verticalAlign="middle">
								<s:Button 
									label="Login"
									click="button1_clickHandler(event)" />
								<s:Label id="loginLabel"
									text="not logged in"
									color="red" />
							</s:HGroup>
						</s:BorderContainer>
					</s:Group>
					<s:Group>
						<s:BorderContainer borderVisible="true">
							<s:layout>
								<s:VerticalLayout 
									horizontalAlign="center"
									verticalAlign="middle" />
							</s:layout>
							<s:Label text="Step 2: Query" />
							<s:HGroup verticalAlign="middle">
								<s:Label text="Term" />
								<s:TextInput id="queryInput"
									enter="button2_clickHandler(event)" />
								<s:Button 
									label="Search"
									click="button2_clickHandler(event)" />
							</s:HGroup>
						</s:BorderContainer>
					</s:Group>
				</s:VGroup>
			</containers:MDIWindow>
			<containers:MDIWindow id="devModuleContainer"
				verticalScrollPolicy="off"
				horizontalScrollPolicy="off"
				layout="absolute"
				x="450"
				y="50"
				width="400"
				height="400"
				borderColor="#010101"
				verticalGap="0"
				title="Skeleton Module">
				<local:InfiniteMapWidget id="devModule"
					exportButtonVisible="true"
					title="Map" />
			</containers:MDIWindow>
		</containers:MDICanvas>
	</s:VGroup>
</s:Application>
