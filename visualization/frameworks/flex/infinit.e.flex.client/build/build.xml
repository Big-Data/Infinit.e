<!-- ======================================= -->
<!-- Flex application build file -->
<!-- ======================================= -->
<project name="infinit.e.flex.client" basedir="../" default="create-release">

	<!-- ======================================= -->
	<!--  Configuration -->
	<!-- ======================================= -->

	<!-- Configuration -->
	<property file="${basedir}/build/build.properties" />

	<!-- Setup Flex Ant Resources -->
	<property name="FLEX_HOME" location="${flex.sdk}" />
	<taskdef resource="flexTasks.tasks" classpath="${build.libs.loc}/flexTasks-4.5.1.jar" />
	
	<!-- ======================================= -->
	<!--  Clean and Init Targets -->
	<!-- ======================================= -->

	<echo message="Base Dir: ${basedir}" />
	
	<target name="clean" description="Removes artifacts from previous builds">
		<delete dir="${build.output.loc}" />
		<delete dir="${dist.loc}" />
	</target>

	<target name="init" description="Initializes project and destination folders">
		<echo message="Project: ${ant.project.name}" />
		<echo message="Flex SDK: ${FLEX_HOME}" />

		<!-- Create directories -->
		<mkdir dir="${bin.loc}" />
		<mkdir dir="${dist.loc}" />
	</target>

	<!-- ======================================= -->
	<!--  Compile Targets -->
	<!-- ======================================= -->
	
	<target name="copy-internal-libs" description="Copies libraries from dependency projects">

		<echo>Building library depenendency...</echo>
		<ant antfile="${basedir}/../infinit.e.flex.client.library/build/build.xml" inheritall="false">
			<property name="basedir" value="${basedir}/../infinit.e.flex.client.library"/>
			<target name="clean"/>
			<target name="compile"/>
			<target name="dist"/>
		</ant>

		<echo>Copying library dependencies...</echo>
		<copy todir="${libs.internal.loc}">
			<fileset dir="${basedir}/../infinit.e.flex.client.library/dist">
				<include name="*.swc"/>
			</fileset>
			<fileset dir="${basedir}/../infinit.e.flex.client.library/libs">
				<include name="*.swc"/>
			</fileset>
		</copy>

	</target>

	<target name="compile" depends="clean, init, copy-internal-libs">

		<echo>Compiling Flex application...</echo>

		<!-- Compile main application as a SWF -->
		<mxmlc file="${src.loc}/${src.application.name}" output="${bin.loc}/${dist.swf.name}.swf">

			<compiler.source-path path-element="${src.loc}" />
			<compiler.source-path path-element="${basedir}/../infinit.e.flex.client.library/locales/{locale}" />
			
			<!-- Custom metadata -->
			<keep-as3-metadata name="Dispatcher"/>
			<keep-as3-metadata name="EventHandler"/>
			<keep-as3-metadata name="Inject"/>
			<keep-as3-metadata name="LocalEventHandler"/>
			<keep-as3-metadata name="ArrayCollectionElementType"/>
			
			<!-- The app libraries in the libs folder -->
			<library-path dir="${libs.loc}" append="true">
				<include name="*.swc" />
			</library-path>
			<!-- The dependent libraries in the libs-internal folder -->
			<library-path dir="${libs.internal.loc}" append="true">
				<include name="*.swc" />
			</library-path>

			<!-- Sets java.awt.headless=true so font compilation works in headless environments -->
			<compiler.headless-server>true</compiler.headless-server>
		</mxmlc>

	</target>

	<!-- ======================================= -->
	<!--  Documentation Targets -->
	<!-- ======================================= -->

	<target name="asdoc" depends="copy-internal-libs" description="Generate ASDoc documentation">

		<echo>Cleaning API docs...</echo>
					
		<delete dir="${docs.loc}"/>
		<mkdir dir="${docs.loc}"/>
				
		<echo>Building API docs...</echo>
		
		<asdoc output="${docs.loc}" main-title="${application.name}" window-title="${application.name} API Docs" left-frameset-width="450" fork="true">

			<compiler.source-path path-element="${src.loc}" />

			<doc-sources path-element="${src.loc}/${package.root}" />
			
			<!-- Configure the flex framework libraries as external link dependencies -->
			<external-library-path dir="${FLEX_HOME}/frameworks" append="true">
				<include name="libs" />
				<include name="locale/{locale}" />
			</external-library-path>

			<!-- The app libraries in the libs folder -->
			<library-path dir="${libs.loc}" append="true">
				<include name="*.swc" />
			</library-path>
			<!-- The dependent libraries in the libs-internal folder -->
			<library-path dir="${libs.internal.loc}" append="true">
				<include name="*.swc" />
			</library-path>

			<compiler.headless-server>true</compiler.headless-server>

		</asdoc>

		<echo message="Documentation has been created in ${docs.loc}" />
	</target>

	<!-- ======================================= -->
	<!--  Distribution Targets -->
	<!-- ======================================= -->
	
	<target name="create-release" description="Compiles SWF and copies all needed artifacts into dist directory" depends="compile">
		<echo>Copy application to ${dist.loc}</echo>
		<copy todir="${dist.loc}">
			<fileset dir="${wrapper.loc}">
				<include name="*.html"/>
				<include name="*.swz"/>
			</fileset>
			<fileset dir="${bin.loc}">
				<include name="*.swf"/>
			</fileset>
			<fileset dir="${javascript.loc}">
				<include name="*.js"/>
			</fileset>
			<!-- PDFServlet -->
			<fileset dir="${build.loc}/misc">
				<include name="CreatePDFServlet.*"/>
			</fileset>
		</copy>
		<!-- Get AppConstants template and rename as normal JS -->
		<copy todir="${dist.loc}">
			<fileset dir="${javascript.loc}">
				<include name="AppConstants.js.TEMPLATE"/>
			</fileset>
			<globmapper from="AppConstants.js.TEMPLATE" to="AppConstants.js"/>
		</copy>
		<copy todir="${dist.loc}/history" overwrite="true">
		   		<fileset dir="${wrapper.loc}/history" includes="**/*"/>
		   	</copy>
		<copy todir="${dist.loc}/com/ikanow/infinit/e/assets" overwrite="true">
		   	<fileset dir="${wrapper.loc}/com/ikanow/infinit/e/assets" includes="**/*"/>
		</copy>
		<checksum file="${bin.loc}/${dist.swf.name}.swf" property="InfiniteSwfHash"/>
		<replaceregexp byline="true" file="${dist.loc}/${src.wrapper.name}">
		   	<regexp pattern="${dist.nocache.pattern}"/>
		   	<substitution expression="${InfiniteSwfHash}"/>
		</replaceregexp>
	</target>

</project>