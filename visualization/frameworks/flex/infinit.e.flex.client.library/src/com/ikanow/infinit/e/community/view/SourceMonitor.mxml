<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2012, The Infinit.e Open Source Project.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License, version 3,
   as published by the Free Software Foundation.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU Affero General Public License for more details.
   
   You should have received a copy of the GNU Affero General Public License
   along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<component:HeaderContentTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:common="com.ikanow.infinit.e.shared.view.component.common.*"
	xmlns:component="com.ikanow.infinit.e.shared.view.component.*"
	xmlns:list="com.ikanow.infinit.e.community.view.list.*"
	xmlns:request="com.ikanow.infinit.e.community.view.request.*"
	xmlns:textInput="com.ikanow.infinit.e.shared.view.component.textInput.*"
	width="310"
	height="262"
	styleName="titleWindowSearchArrow"
	currentState="{ model.navigator.currentState }"
	preinitialize="CommunitiesNavigator.updateViewStates( this )"
	close="closeHandler(event)"
	creationComplete="headercontenttitlewindowCreationCompleteHandler(event)">

	<!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: -->
	<!-- Script ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: -->

	<fx:Script>
		<![CDATA[
			import com.ikanow.infinit.e.community.model.manager.CommunityManager;
			import com.ikanow.infinit.e.community.model.presentation.CommunitiesModel;
			import com.ikanow.infinit.e.community.model.presentation.CommunitiesNavigator;
			import com.ikanow.infinit.e.shared.event.SourceEvent;
			
			import mx.collections.ArrayList;
			import mx.events.CloseEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.DropDownEvent;
			
			[Bindable]
			[Inject]
			public var model:CommunitiesModel;
			
			[Bindable]
			[Inject]
			public var manager:CommunityManager;
			
			/**
			 * function to handle the closing of the component
			 * 
			 * @param event The CloseEvent received
			 */
			protected function closeHandler(event:CloseEvent):void
			{
				manager.selectedSource = null;
				PopUpManager.removePopUp(this);
			}
			
			protected function headercontenttitlewindowCreationCompleteHandler(event:FlexEvent):void
			{
				sourceMonitorList.addEventListener(SourceEvent.SOURCE_DATA_COPIED, handleSourceDataCopiedEvent);
			}
			
			/**
			 * function to handle when the user copies one of the 
			 * data elements in the list
			 * 
			 * @param event The SourceEvent received
			 */
			protected function handleSourceDataCopiedEvent(event:SourceEvent):void
			{
				fadeIn.end();
				fadeIn.play();
				fadeIn.addEventListener(EffectEvent.EFFECT_END, handleEffectEndEvent);
			}
			
			/**
			 * function to handle when the effect ends
			 * 
			 * @param event The EffectEvent received
			 */
			protected function handleEffectEndEvent(event:EffectEvent):void
			{
				fadeOut.end();
				fadeOut.play();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Fade id="fadeIn" duration="1000" target="{clipboardLabel}" alphaFrom="0" alphaTo="1"/>
		<s:Fade id="fadeOut" duration="1000" target="{clipboardLabel}" alphaFrom="1" alphaTo="0"/>
	</fx:Declarations>

	<!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: -->
	<!-- States ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: -->

	<component:states>
		<s:State name="list" />
		<s:State name="request" />
	</component:states>

	<!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: -->
	<!-- Views :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: -->

	<!-- Header -->
	<component:headerContent>

		<common:InfLabel id="titleLabel"
			width="100%"
			text="Infinite Source Monitor"
			paddingTop="2"
			maxDisplayedLines="1"
			styleName="lightGrey"
			showDropShadow="true" 
			left="7"
			paddingRight="40"
			right="-4"
			top="7"
			horizontalCenter="0"
			fontWeight="bold"
			textAlign="center"/>
		
		<common:InfLabel id="clipboardLabel"
						 text="Data copied to clipboard"
						 styleName="lightGrey"
						 textAlign="center"
						 width="100%"
						 verticalAlign="middle"
						 horizontalCenter="0"
						 fontWeight="bold"
						 showDropShadow="true"
						 alpha="0"
						 left="7"
						 paddingRight="40"
						 right="-4"
						 top="{titleLabel.height + 10}"/>
	</component:headerContent>

	<!-- Source Monitor List -->
	<list:SourceMonitorList id="sourceMonitorList"
		width="100%"
		height="100%"
		includeIn="list" />

</component:HeaderContentTitleWindow>
